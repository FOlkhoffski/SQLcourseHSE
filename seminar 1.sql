-- Создание таблицы: 
CREATE TABLE emp ( -- создать таблицу с названием emp 
    emp_id INT, -- первое поле таблицы (столбец) с названием empid где есть целочисленный уникальный идентификатор сотрудника 
    emp_name VARCHAR(20), -- имя, строка в SQL обозначается не string, а varchar 
    hiredate DATE, -- дата принятия на работу, формат дата 
    salary NUMBER(7,2) -- зарплата, число с 7 знаками до запятой и двумя после 
) 

-- Просмотр таблицы с данными:
SELECT * FROM emp

-- Дескрип таблицы, общее описание структуры
DESC emp

-- Добавление нового значения в таблицу, нужно быть внимательным, чтобы сохранять правильный порядок введения значений!
INSERT INTO emp VALUES (101, 'Иван', '17-NOV-1999', 55000.0167) 

-- Ещё один метод добавления значений в таблицу. Чтобы не вводить заново полный вектор значений, можем указать что вводим и для кого, и после ввести значения
INSERT INTO emp (emp_id, emp_name) VALUES (444, 'Маша')

-- С помощью функции ALTER TABLE изменяем структуру таблицы, функция ADD добавляет новый столбец в таблицу
ALTER TABLE emp ADD emp_age INT 

-- С помощью функции DROP COLUMN удаляем столбец
ALTER TABLE emp DROP COLUMN emp_age

-- Функция DELETE FROM позволяет удалить значения из таблицы, WHERE в свою очередь указывает на условие, в нашем случае удаляем зарплату больше 70 000
DELETE FROM emp WHERE salary > 70000

-- Функция UPDATE позволяет изменить сразу несколько значений, SET же устанавливает изменения, которые мы делаем
UPDATE emp SET salary = salary * 1.1

-- Функция SELECT (NB!) позволяет вывести из общего датафрейма определённую группу и сразу в выводе пробразовать определённую группу данных
SELECT emp_name, salary*0.87 as зарплата -- что выбираем, какие столбцы, как выводим. В нашем случае столбец Salary из-за атрибута "as" выведится как "зарплата", все значения будут умножены на 0.87
FROM emp -- где выбираем, в какой таблице
WHERE salary < 70000 -- какие именно, удовлетворяющие каким условиям 
ORDER BY salary DESC -- в каком порядке выводить



